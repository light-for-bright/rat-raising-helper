// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
  console.log('üöÄ [DEBUG] initApp started');
  log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É
  const gameLoaded = loadGame();
  
  if (gameLoaded) {
    log('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ LocalStorage');
  } else {
    log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞');
    saveGame(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫
  updateTabVisibility();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  initEventHandlers();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è
  loadDataToFields();
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç
  if (typeof recalculateAll === 'function') {
    recalculateAll();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –±–ª–∞–Ω–∫–∞ —É—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É 2 —ç—Ç–∞–ø–∞
  if (typeof initStage2Tab === "function") {
    initStage2Tab();
  }
  if (typeof initCashFlowTab === 'function') {
    initCashFlowTab();
  }

  log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–æ–∫
function updateTabVisibility() {
  const stage2Tab = document.getElementById('stage2-tab');
  if (stage2Tab) {
    if (gameState.stage2Unlocked) {
      stage2Tab.classList.remove('disabled');
      stage2Tab.style.pointerEvents = 'auto';
    } else {
      stage2Tab.classList.add('disabled');
      stage2Tab.style.pointerEvents = 'none';
    }
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
function loadDataToFields() {
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è
  document.getElementById('profession').value = gameState.profession || '';
  document.getElementById('dream').value = gameState.dream || '';
  document.getElementById('auditor').value = gameState.auditor || '';
  
  // –î–æ—Ö–æ–¥—ã
  document.getElementById('salary').value = gameState.income.salary || '';
  
  // –†–∞—Å—Ö–æ–¥—ã
  document.getElementById('taxes').value = gameState.expenses.taxes || '';
  document.getElementById('house-mortgage').value = gameState.expenses.houseMortgage || '';
  document.getElementById('education-loan').value = gameState.expenses.educationLoan || '';
  document.getElementById('car-loan').value = gameState.expenses.carLoan || '';
  document.getElementById('credit-cards').value = gameState.expenses.creditCards || '';
  document.getElementById('other-expenses').value = gameState.expenses.otherExpenses || '';
  document.getElementById('bank-loan').value = gameState.expenses.bankLoan || '';
  document.getElementById('children-expenses').value = gameState.expenses.childrenExpenses || '';
  document.getElementById('children-count').value = gameState.expenses.childrenCount || '';
  
  // –ê–∫—Ç–∏–≤—ã
  document.getElementById('savings').value = gameState.assets.savings || '';
  document.getElementById('precious-metals').value = gameState.assets.preciousMetals || '';
  
  // –ü–∞—Å—Å–∏–≤—ã
  document.getElementById('house-mortgage-liability').value = gameState.liabilities.houseMortgage || '';
  document.getElementById('education-loan-liability').value = gameState.liabilities.educationLoan || '';
  document.getElementById('car-loan-liability').value = gameState.liabilities.carLoan || '';
  document.getElementById('credit-cards-liability').value = gameState.liabilities.creditCards || '';
  document.getElementById('bank-loan-liability').value = gameState.liabilities.bankLoan || '';
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  loadTableData();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã
function loadTableData() {
  // –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞
  loadRealEstateIncomeTable();
  
  // –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ü–∏–π
  loadStocksTable();
  
  // –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞
  loadRealEstateAssetsTable();
  
  // –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Å—Å–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞
  loadRealEstateLiabilitiesTable();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞
function loadRealEstateIncomeTable() {
  const table = document.getElementById('real-estate-income-table').getElementsByTagName('tbody')[0];
  table.innerHTML = '';
  
  if (gameState.income.realEstateBusiness && gameState.income.realEstateBusiness.length > 0) {
    gameState.income.realEstateBusiness.forEach((item, index) => {
      addRealEstateIncomeRow(item.name, item.monthlyIncome, index);
    });
  } else {
    addRealEstateIncomeRow();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ü–∏–π
function loadStocksTable() {
  const table = document.getElementById('stocks-table').getElementsByTagName('tbody')[0];
  table.innerHTML = '';
  
  if (gameState.assets.stocks && gameState.assets.stocks.length > 0) {
    gameState.assets.stocks.forEach((stock, index) => {
      addStockRow(stock.name, stock.quantity, stock.price, index);
    });
  } else {
    addStockRow();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞
function loadRealEstateAssetsTable() {
  const table = document.getElementById('real-estate-assets-table').getElementsByTagName('tbody')[0];
  table.innerHTML = '';
  
  if (gameState.assets.realEstateBusiness && gameState.assets.realEstateBusiness.length > 0) {
    gameState.assets.realEstateBusiness.forEach((item, index) => {
      addRealEstateAssetRow(item.name, item.downPayment, item.price, index);
    });
  } else {
    addRealEstateAssetRow();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Å—Å–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞
function loadRealEstateLiabilitiesTable() {
  const table = document.getElementById('real-estate-liabilities-table').getElementsByTagName('tbody')[0];
  table.innerHTML = '';
  
  if (gameState.liabilities.realEstateBusiness && gameState.liabilities.realEstateBusiness.length > 0) {
    gameState.liabilities.realEstateBusiness.forEach((item, index) => {
      addRealEstateLiabilityRow(item.name, item.mortgage, index);
    });
  } else {
    addRealEstateLiabilityRow();
  }
}

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ê–ë–õ–ò–¶–ê–ú–ò

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—ã
function addRealEstateIncomeRow(name = '', monthlyIncome = '', index = null) {
  const table = document.getElementById('real-estate-income-table').getElementsByTagName('tbody')[0];
  const row = table.insertRow();
  
  row.innerHTML = `
    <td><input type="text" class="form-control form-control-sm" value="${name}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" onchange="updateRealEstateIncome(${index || table.rows.length - 1}, this.value, 'name')"></td>
    <td><input type="number" class="form-control form-control-sm" value="${monthlyIncome}" placeholder="0" onchange="updateRealEstateIncome(${index || table.rows.length - 1}, this.value, 'monthlyIncome')"></td>
    <td style="text-align: center; background-color: #f8f9fa; padding: 0.5rem;">
      <button type="button" class="btn btn-sm btn-success" onclick="addRealEstateIncomeRow()" style="margin-right: 0.5rem; min-width: 40px; min-height: 40px; background-color: #198754 !important; color: white !important;">+</button>
      <button type="button" class="btn btn-sm btn-danger" onclick="removeRealEstateIncomeRow(${index || table.rows.length - 1})" style="min-width: 40px; min-height: 40px; background-color: #6c757d !important; color: white !important;">üóëÔ∏è</button>
    </td>
  `;
  
  if (index === null) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ gameState
    if (!gameState.income.realEstateBusiness) {
      gameState.income.realEstateBusiness = [];
    }
    gameState.income.realEstateBusiness.push({ name: '', monthlyIncome: 0 });
    log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞');
  }
}

function addStockRow(name = '', quantity = '', price = '', index = null) {
  const table = document.getElementById('stocks-table').getElementsByTagName('tbody')[0];
  const row = table.insertRow();
  
  row.innerHTML = `
    <td><input type="text" class="form-control form-control-sm" value="${name}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" onchange="updateStock(${index || table.rows.length - 1}, this.value, 'name')"></td>
    <td><input type="number" class="form-control form-control-sm" value="${quantity}" placeholder="0" onchange="updateStock(${index || table.rows.length - 1}, this.value, 'quantity')"></td>
    <td><input type="number" class="form-control form-control-sm" value="${price}" placeholder="0" onchange="updateStock(${index || table.rows.length - 1}, this.value, 'price')"></td>
    <td><span class="form-control-plaintext small">${formatCurrency((parseFloat(quantity) || 0) * (parseFloat(price) || 0))}</span></td>
    <td style="text-align: center; background-color: #f8f9fa; padding: 0.5rem;">
      <button type="button" class="btn btn-sm btn-success" onclick="addStockRow()" style="margin-right: 0.5rem; min-width: 40px; min-height: 40px; background-color: #198754 !important; color: white !important;">+</button>
      <button type="button" class="btn btn-sm btn-danger" onclick="removeStockRow(${index || table.rows.length - 1})" style="min-width: 40px; min-height: 40px; background-color: #6c757d !important; color: white !important;">üóëÔ∏è</button>
    </td>
  `;
  
  if (index === null) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ gameState
    if (!gameState.assets.stocks) {
      gameState.assets.stocks = [];
    }
    gameState.assets.stocks.push({ name: '', quantity: 0, price: 0 });
    log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ü–∏–π');
  }
}

function addRealEstateAssetRow(name = '', downPayment = '', price = '', index = null) {
  const table = document.getElementById('real-estate-assets-table').getElementsByTagName('tbody')[0];
  const row = table.insertRow();
  
  const actualIndex = index !== null ? index : table.rows.length - 1;
  
  row.innerHTML = `
    <td><input type="text" class="form-control form-control-sm" value="${name}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" onchange="updateRealEstateAsset(${actualIndex}, this.value, 'name')"></td>
    <td><input type="number" class="form-control form-control-sm" value="${downPayment}" placeholder="0" onchange="updateRealEstateAsset(${actualIndex}, this.value, 'downPayment')"></td>
    <td><input type="number" class="form-control form-control-sm" value="${price}" placeholder="0" onchange="updateRealEstateAsset(${actualIndex}, this.value, 'price')"></td>
    <td class="text-center" style="background-color: #f8f9fa; padding: 0.5rem;">
      <button type="button" class="btn btn-sm btn-success" onclick="addRealEstateAssetRow()" title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É" style="margin-right: 0.5rem; min-width: 40px; min-height: 40px; background-color: #198754 !important; color: white !important;">+</button>
      <button type="button" class="btn btn-sm btn-danger" onclick="removeRealEstateAssetRow(${actualIndex})" title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É" style="min-width: 40px; min-height: 40px; background-color: #6c757d !important; color: white !important;">üóëÔ∏è</button>
    </td>
  `;
  
  if (index === null) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ gameState
    if (!gameState.assets.realEstateBusiness) {
      gameState.assets.realEstateBusiness = [];
    }
    gameState.assets.realEstateBusiness.push({ name: '', downPayment: 0, price: 0 });
    log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞');
  }
  
  log(`–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${actualIndex}, HTML:`, row.innerHTML);
}

function addRealEstateLiabilityRow(name = '', mortgage = '', index = null) {
  const table = document.getElementById('real-estate-liabilities-table').getElementsByTagName('tbody')[0];
  const row = table.insertRow();
  
  row.innerHTML = `
    <td><input type="text" class="form-control form-control-sm" value="${name}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" onchange="updateRealEstateLiability(${index || table.rows.length - 1}, this.value, 'name')"></td>
    <td><input type="number" class="form-control form-control-sm" value="${mortgage}" placeholder="0" onchange="updateRealEstateLiability(${index || table.rows.length - 1}, this.value, 'mortgage')"></td>
    <td>
      <button type="button" class="btn btn-sm btn-success me-1" onclick="addRealEstateLiabilityRow()">+</button>
      <button type="button" class="btn btn-sm btn-danger" onclick="removeRealEstateLiabilityRow(${index || table.rows.length - 1})">üóëÔ∏è</button>
    </td>
  `;
  
  if (index === null) {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ gameState
    if (!gameState.liabilities.realEstateBusiness) {
      gameState.liabilities.realEstateBusiness = [];
    }
    gameState.liabilities.realEstateBusiness.push({ name: '', mortgage: 0 });
    log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –ø–∞—Å—Å–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
function updateRealEstateIncome(index, value, field) {
  if (gameState.income.realEstateBusiness && gameState.income.realEstateBusiness[index]) {
    if (field === 'monthlyIncome') {
      gameState.income.realEstateBusiness[index][field] = parseFloat(value) || 0;
    } else {
      gameState.income.realEstateBusiness[index][field] = value;
    }
    recalculateAll();
  }
}

function updateStock(index, value, field) {
  if (gameState.assets.stocks && gameState.assets.stocks[index]) {
    if (field === 'quantity' || field === 'price') {
      gameState.assets.stocks[index][field] = parseFloat(value) || 0;
    } else {
      gameState.assets.stocks[index][field] = value;
    }
    recalculateAll();
  }
}

function updateRealEstateAsset(index, value, field) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!gameState.assets.realEstateBusiness) {
    gameState.assets.realEstateBusiness = [];
  }
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!gameState.assets.realEstateBusiness[index]) {
    gameState.assets.realEstateBusiness[index] = { name: '', downPayment: 0, price: 0 };
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
  if (field === 'downPayment' || field === 'price') {
    gameState.assets.realEstateBusiness[index][field] = parseFloat(value) || 0;
  } else {
    gameState.assets.realEstateBusiness[index][field] = value;
  }
  
  recalculateAll();
  log(`–û–±–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞ [${index}].${field}:`, value);
}

function updateRealEstateLiability(index, value, field) {
  if (gameState.liabilities.realEstateBusiness && gameState.liabilities.realEstateBusiness[index]) {
    if (field === 'mortgage') {
      gameState.liabilities.realEstateBusiness[index][field] = parseFloat(value) || 0;
    } else {
      gameState.liabilities.realEstateBusiness[index][field] = value;
    }
    recalculateAll();
  }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
function removeRealEstateIncomeRow(index) {
  if (gameState.income.realEstateBusiness && gameState.income.realEstateBusiness.length > index) {
    gameState.income.realEstateBusiness.splice(index, 1);
    loadRealEstateIncomeTable();
    recalculateAll();
    log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Ö–æ–¥–æ–≤ –æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞');
  }
}

function removeStockRow(index) {
  if (gameState.assets.stocks && gameState.assets.stocks.length > index) {
    gameState.assets.stocks.splice(index, 1);
    loadStocksTable();
    recalculateAll();
    log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ü–∏–π');
  }
}

function removeRealEstateAssetRow(index) {
  if (gameState.assets.realEstateBusiness && gameState.assets.realEstateBusiness.length > index) {
    gameState.assets.realEstateBusiness.splice(index, 1);
    loadRealEstateAssetsTable();
    recalculateAll();
    log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞');
  }
}

function removeRealEstateLiabilityRow(index) {
  if (gameState.liabilities.realEstateBusiness && gameState.liabilities.realEstateBusiness.length > index) {
    gameState.liabilities.realEstateBusiness.splice(index, 1);
    loadRealEstateLiabilitiesTable();
    recalculateAll();
    log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Å—Å–∏–≤–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏/–±–∏–∑–Ω–µ—Å–∞');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventHandlers() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
  const resetButton = document.getElementById('reset-game-btn');
  if (resetButton) {
    resetButton.addEventListener('click', function() {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
        resetGame();
        location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      }
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  document.addEventListener('input', function(event) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ gameState
      updateGameStateFromInput(event.target);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
      if (typeof recalculateAll === 'function') {
        recalculateAll();
      }
    }
  });
  
  log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
function validateInput(inputElement) {
  const id = inputElement.id;
  const value = inputElement.value;
  const type = inputElement.type;
  
  // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  inputElement.classList.remove("is-invalid");
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
  if (type === "number") {
    const numValue = parseFloat(value);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    const moneyFields = ["salary", "taxes", "house-mortgage", "education-loan", "car-loan", "credit-cards", "other-expenses", "bank-loan", "children-expenses", "savings", "precious-metals", "house-mortgage-liability", "education-loan-liability", "car-loan-liability", "credit-cards-liability", "bank-loan-liability", "initial-balance"];
    
    if (moneyFields.includes(id) && numValue < 0) {
      showValidationError(inputElement, "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π");
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    if (numValue > 1000000000) {
      showValidationError(inputElement, "–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 1 –º–ª—Ä–¥)");
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
    if (id === "children-count" && (numValue < 0 || numValue > 3)) {
      showValidationError(inputElement, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 3");
      return false;
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  if (type === "text" || type === "textarea") {
    if (value.length > 100) {
      showValidationError(inputElement, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)");
      return false;
    }
  }
  
  return true;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function showValidationError(inputElement, message) {
  inputElement.classList.add("is-invalid");
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const existingError = inputElement.parentNode.querySelector(".invalid-feedback");
  if (existingError) {
    existingError.remove();
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const errorDiv = document.createElement("div");
  errorDiv.className = "invalid-feedback";
  errorDiv.textContent = message;
  inputElement.parentNode.appendChild(errorDiv);
}

function updateGameStateFromInput(inputElement) {
  const id = inputElement.id;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
  if (!validateInput(inputElement)) {
    return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  }

  const value = inputElement.value;
  
  // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–∞ gameState
  const fieldMapping = {
    'profession': 'profession',
    'dream': 'dream',
    'auditor': 'auditor',
    'salary': 'income.salary',
    'taxes': 'expenses.taxes',
    'house-mortgage': 'expenses.houseMortgage',
    'education-loan': 'expenses.educationLoan',
    'car-loan': 'expenses.carLoan',
    'credit-cards': 'expenses.creditCards',
    'other-expenses': 'expenses.otherExpenses',
    'bank-loan': 'expenses.bankLoan',
    'children-expenses': 'expenses.childrenExpenses',
    'children-count': 'expenses.childrenCount',
    'savings': 'assets.savings',
    'precious-metals': 'assets.preciousMetals',
    'house-mortgage-liability': 'liabilities.houseMortgage',
    'education-loan-liability': 'liabilities.educationLoan',
    'car-loan-liability': 'liabilities.carLoan',
    'credit-cards-liability': 'liabilities.creditCards',
    'bank-loan-liability': 'liabilities.bankLoan',
    'initial-balance': 'cashFlow.initialBalance'
  };
  
  const fieldPath = fieldMapping[id];
  if (fieldPath) {
    const numValue = parseFloat(value) || 0;
    
    if (fieldPath.includes('.')) {
      const [parent, child] = fieldPath.split('.');
      gameState[parent][child] = numValue;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
      if (id === 'bank-loan-liability') {
        updateBankLoanExpense(numValue);
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
      if (id === 'children-count') {
        updateChildrenExpenses();
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
      if (id === 'children-expenses') {
        updateChildrenExpenses();
      }
    } else {
      gameState[fieldPath] = value;
    }
    
    log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ ${fieldPath}:`, value);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É –∫—Ä–µ–¥–∏—Ç—É
function updateBankLoanExpense(bankLoanAmount) {
  // 10% –æ—Ç —Å—É–º–º—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –∏–¥–µ—Ç –≤ —Ä–∞—Å—Ö–æ–¥—ã
  const bankLoanExpense = bankLoanAmount * GAME_CONFIG.BANK_LOAN_RATE;
  gameState.expenses.bankLoan = bankLoanExpense;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ UI
  const bankLoanExpenseField = document.getElementById('bank-loan');
  if (bankLoanExpenseField) {
    bankLoanExpenseField.value = bankLoanExpense;
  }
  
  log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É –∫—Ä–µ–¥–∏—Ç—É: ${bankLoanExpense} ‚ÇΩ (10% –æ—Ç ${bankLoanAmount} ‚ÇΩ)`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –¥–µ—Ç–µ–π
function updateChildrenExpenses() {
  log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –¥–µ—Ç–µ–π");
  const childrenCount = Math.min(Math.max(parseInt(gameState.expenses.childrenCount) || 0, 0), 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 3
  const expensesPerChild = parseFloat(gameState.expenses.childrenExpenses) || 0;
  const totalChildrenExpenses = childrenCount * expensesPerChild;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ gameState (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
  gameState.expenses.childrenCount = childrenCount;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π –≤ UI
  const childrenCountField = document.getElementById('children-count');
  if (childrenCountField) {
    childrenCountField.value = childrenCount;
  }
  
  log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–µ—Ç–µ–π: ${expensesPerChild} ‚ÇΩ √ó ${childrenCount} = ${totalChildrenExpenses} ‚ÇΩ`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function updateGameState() {
  saveGame();
  updateTabVisibility();
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
  if (typeof recalculateAll === 'function') {
    recalculateAll();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  initApp();
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–∞–Ω–∫–æ–º —É—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function addTransactionRow() {
  const tbody = document.getElementById("transactions-table-body");
  
  const transactionId = Date.now().toString();
  
  const row = document.createElement("tr");
  row.id = `transaction-row-${transactionId}`;
  row.innerHTML = `
    <td>
      <div class="btn-group btn-group-sm" role="group">
        <input type="radio" class="btn-check" name="transaction-type-${transactionId}" id="income-${transactionId}" value="income" autocomplete="off">
        <label class="btn btn-outline-success" for="income-${transactionId}" title="–î–æ—Ö–æ–¥">‚ûï</label>
        
        <input type="radio" class="btn-check" name="transaction-type-${transactionId}" id="expense-${transactionId}" value="expense" autocomplete="off">
        <label class="btn btn-outline-danger" for="expense-${transactionId}" title="–†–∞—Å—Ö–æ–¥">‚ûñ</label>
      </div>
    </td>
    <td>
      <input type="number" class="form-control form-control-sm" id="transaction-amount-${transactionId}" placeholder="0" step="0.01">
    </td>
    <td>
      <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeTransactionRow('${transactionId}')" title="–£–¥–∞–ª–∏—Ç—å">
        üóëÔ∏è
      </button>
    </td>
  `;
  
  tbody.appendChild(row);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ë–ï–ó –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
  const amountInput = document.getElementById(`transaction-amount-${transactionId}`);
  const typeInputs = document.querySelectorAll(`input[name="transaction-type-${transactionId}"]`);
  
  amountInput.addEventListener("input", () => updateTransactionFromUI(transactionId));
  typeInputs.forEach(input => {
    input.addEventListener("change", () => updateTransactionFromUI(transactionId));
  });
  
  log("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", { transactionId });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function removeTransactionRow(transactionId) {
  const row = document.getElementById(`transaction-row-${transactionId}`);
  if (row) {
    row.remove();
    removeTransaction(transactionId);
    log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', { transactionId });
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function updateTransactionFromUI(transactionId) {
  const amount = document.getElementById(`transaction-amount-${transactionId}`)?.value;
  const typeInput = document.querySelector(`input[name="transaction-type-${transactionId}"]:checked`);
  const type = typeInput?.value;
  
  if (amount && type) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    let transaction = gameState.cashFlow.transactions.find(t => t.id === transactionId);
    
    if (transaction) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      transaction.amount = parseFloat(amount) || 0;
      transaction.type = type;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      transaction = {
        id: transactionId,
        amount: parseFloat(amount) || 0,
        type: type,
        description: ""
      };
      gameState.cashFlow.transactions.push(transaction);
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    calculateCurrentBalance();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    document.getElementById("current-balance").textContent = formatCurrency(gameState.cashFlow.currentBalance);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∏–∑–Ω–µ—Å—ã
    cleanupEmptyBusinesses();
    saveGame();
    
    log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", { transactionId, amount, type, currentBalance: gameState.cashFlow.currentBalance });
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
function updateStartingCapital() {
  const savings = parseFloat(document.getElementById("cashflow-savings")?.value) || 0;
  const monthlyCashFlow = parseFloat(document.getElementById("cashflow-monthly-cashflow")?.value) || 0;
  
  gameState.cashFlow.savings = savings;
  gameState.cashFlow.monthlyCashFlow = monthlyCashFlow;
  
  // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª = —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è + –º–µ—Å—è—á–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫
  gameState.cashFlow.startingCapital = savings + monthlyCashFlow;
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  calculateCurrentBalance();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º UI
  document.getElementById("starting-capital").textContent = formatCurrency(gameState.cashFlow.startingCapital);
  document.getElementById("current-balance").textContent = formatCurrency(gameState.cashFlow.currentBalance);
  
  saveGame();
  log("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω", { savings, monthlyCashFlow, startingCapital: gameState.cashFlow.startingCapital, currentBalance: gameState.cashFlow.currentBalance });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–∞–Ω–∫–∞ —É—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
function initCashFlowTab() {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª—è
  document.getElementById("cashflow-savings").value = gameState.cashFlow.savings || "";
  document.getElementById("cashflow-monthly-cashflow").value = gameState.cashFlow.monthlyCashFlow || "";
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
  const savings = parseFloat(gameState.cashFlow.savings) || 0;
  const monthlyCashFlow = parseFloat(gameState.cashFlow.monthlyCashFlow) || 0;
  gameState.cashFlow.startingCapital = savings + monthlyCashFlow;
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  calculateCurrentBalance();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  document.getElementById("starting-capital").textContent = formatCurrency(gameState.cashFlow.startingCapital);
  document.getElementById("current-balance").textContent = formatCurrency(gameState.cashFlow.currentBalance);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ë–ï–ó –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
  document.getElementById("cashflow-savings").addEventListener("input", updateStartingCapital);
  document.getElementById("cashflow-monthly-cashflow").addEventListener("input", updateStartingCapital);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  renderTransactions();
  
  log("–í–∫–ª–∞–¥–∫–∞ –±–ª–∞–Ω–∫–∞ —É—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
function renderTransactions() {
  const tbody = document.getElementById("transactions-table-body");
  tbody.innerHTML = "";
  
  gameState.cashFlow.transactions.forEach(transaction => {
    const row = document.createElement("tr");
    row.id = `transaction-row-${transaction.id}`;
    row.innerHTML = `
      <td>
        <div class="btn-group btn-group-sm" role="group">
          <input type="radio" class="btn-check" name="transaction-type-${transaction.id}" id="income-${transaction.id}" value="income" autocomplete="off" ${transaction.type === "income" ? "checked" : ""}>
          <label class="btn btn-outline-success" for="income-${transaction.id}" title="–î–æ—Ö–æ–¥">‚ûï</label>
          
          <input type="radio" class="btn-check" name="transaction-type-${transaction.id}" id="expense-${transaction.id}" value="expense" autocomplete="off" ${transaction.type === "expense" ? "checked" : ""}>
          <label class="btn btn-outline-danger" for="expense-${transaction.id}" title="–†–∞—Å—Ö–æ–¥">‚ûñ</label>
        </div>
      </td>
      <td>
        <input type="number" class="form-control form-control-sm" id="transaction-amount-${transaction.id}" value="${transaction.amount}" step="0.01">
      </td>
      <td>
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeTransactionRow('${transaction.id}')" title="–£–¥–∞–ª–∏—Ç—å">
          üóëÔ∏è
        </button>
      </td>
    `;
    
    tbody.appendChild(row);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ë–ï–ó –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
    const amountInput = document.getElementById(`transaction-amount-${transaction.id}`);
    const typeInputs = document.querySelectorAll(`input[name="transaction-type-${transaction.id}"]`);
    
    amountInput.addEventListener("input", () => updateTransactionFromUI(transaction.id));
    typeInputs.forEach(input => {
      input.addEventListener("change", () => updateTransactionFromUI(transaction.id));
    });
  });
  
  log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã", { count: gameState.cashFlow.transactions.length });
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.addTransactionRow = addTransactionRow;
window.removeTransactionRow = removeTransactionRow;
window.updateTransactionFromUI = updateTransactionFromUI;
window.updateStartingCapital = updateStartingCapital;
window.initCashFlowTab = initCashFlowTab;


// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 2 —ç—Ç–∞–ø–æ–º - –°–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–∏–∑–Ω–µ—Å–∞
function addBusinessRow() {
  const tbody = document.getElementById("businesses-table-body");
  
  const businessId = Date.now().toString();
  
  const row = document.createElement("tr");
  row.id = `business-row-${businessId}`;
  row.innerHTML = `
    <td>
      <input type="text" class="form-control form-control-sm" id="business-name-${businessId}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞">
    </td>
    <td>
      <input type="number" class="form-control form-control-sm" id="business-cashflow-${businessId}" placeholder="0" step="0.01">
    </td>
    <td>
      <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeBusinessRow('${businessId}')" title="–£–¥–∞–ª–∏—Ç—å">
        üóëÔ∏è
      </button>
    </td>
  `;
  
  tbody.appendChild(row);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const nameInput = document.getElementById(`business-name-${businessId}`);
  const cashflowInput = document.getElementById(`business-cashflow-${businessId}`);
  
  nameInput.addEventListener("input", () => updateBusinessFromUI(businessId));
  cashflowInput.addEventListener("input", () => updateBusinessFromUI(businessId));
  
  log("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–∏–∑–Ω–µ—Å–∞", { businessId });
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
function updateBusinessFromUI(businessId) {
  const name = document.getElementById(`business-name-${businessId}`)?.value;
  const cashflow = document.getElementById(`business-cashflow-${businessId}`)?.value;
  
  if (name || cashflow) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∏–∑–Ω–µ—Å
    let business = gameState.stage2.businesses.find(b => b.id === businessId);
    
    if (business) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∏–∑–Ω–µ—Å
      business.name = name || "";
      business.monthlyCashFlow = parseFloat(cashflow) || 0;
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
      business = {
        id: businessId,
        name: name || "",
        monthlyCashFlow: parseFloat(cashflow) || 0,
      };
      gameState.stage2.businesses.push(business);
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤
    calculateStage2CurrentIncome();
    calculateStage2CurrentIncome();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateStage2Display();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã
    checkWinCondition();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∏–∑–Ω–µ—Å—ã
    cleanupEmptyBusinesses();
    saveGame();
    
    log("–ë–∏–∑–Ω–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω", { businessId, name, cashflow, income });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2 —ç—Ç–∞–ø–∞
function initStage2Tab() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å—É–º–º
  updateStage2Display();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∏–∑–Ω–µ—Å—ã
  renderBusinesses();
  
  log("–í–∫–ª–∞–¥–∫–∞ 2 —ç—Ç–∞–ø–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 2 —ç—Ç–∞–ø–∞
function updateStage2Display() {
  // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
  document.getElementById("stage2-passive-income").textContent = formatCurrency(gameState.stage2.passiveIncomeAtTransition || 0);
  
  // –ü–æ–ª–µ 1 (√ó100)
  const field1 = (gameState.stage2.passiveIncomeAtTransition || 0) * GAME_CONFIG.STAGE2_MULTIPLIER;
  document.getElementById("stage2-field1").textContent = formatCurrency(field1);
  
  // –ü–æ–ª–µ 2 (–ü–æ–ª–µ 1 + 50,000)
  const field2 = field1 + GAME_CONFIG.STAGE2_BONUS;
  document.getElementById("stage2-field2").textContent = formatCurrency(field2);
  
  // –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤
  const currentIncome = calculateStage2CurrentIncome();
  document.getElementById("stage2-current-income").textContent = formatCurrency(currentIncome);
  
  log("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2 —ç—Ç–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", { field1, field2, currentIncome });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
function renderBusinesses() {
  const tbody = document.getElementById("businesses-table-body");
  tbody.innerHTML = "";
  
  gameState.stage2.businesses.forEach(business => {
    const row = document.createElement("tr");
    row.id = `business-row-${business.id}`;
    row.innerHTML = `
      <td>
        <input type="text" class="form-control form-control-sm" id="business-name-${business.id}" value="${business.name}">
      </td>
      <td>
        <input type="number" class="form-control form-control-sm" id="business-cashflow-${business.id}" value="${business.monthlyCashFlow}" step="0.01">
      </td>
      <td>
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeBusinessRow('${business.id}')" title="–£–¥–∞–ª–∏—Ç—å">
          üóëÔ∏è
        </button>
      </td>
    `;
    
    tbody.appendChild(row);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const nameInput = document.getElementById(`business-name-${business.id}`);
    const cashflowInput = document.getElementById(`business-cashflow-${business.id}`);
    
    nameInput.addEventListener("input", () => updateBusinessFromUI(business.id));
    cashflowInput.addEventListener("input", () => updateBusinessFromUI(business.id));
  });
  
  log("–ë–∏–∑–Ω–µ—Å—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã", { count: gameState.stage2.businesses.length });
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.addBusinessRow = addBusinessRow;
window.updateBusinessFromUI = updateBusinessFromUI;
window.initStage2Tab = initStage2Tab;
window.updateStage2Display = updateStage2Display;
window.renderBusinesses = renderBusinesses;




// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
function cleanupEmptyBusinesses() {
  const initialCount = gameState.stage2.businesses.length;
  
  // –£–¥–∞–ª—è–µ–º –±–∏–∑–Ω–µ—Å—ã —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –Ω—É–ª–µ–≤—ã–º –¥–µ–Ω–µ–∂–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
  gameState.stage2.businesses = gameState.stage2.businesses.filter(business => {
    const hasName = business.name && business.name.trim() !== '';
    const hasCashFlow = parseFloat(business.monthlyCashFlow) > 0;
    return hasName || hasCashFlow;
  });
  
  const removedCount = initialCount - gameState.stage2.businesses.length;
  
  if (removedCount > 0) {
    log(`–£–¥–∞–ª–µ–Ω–æ ${removedCount} –ø—É—Å—Ç—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤`);
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥
    calculateStage2CurrentIncome();
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateStage2Display();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –±–∏–∑–Ω–µ—Å—ã
    cleanupEmptyBusinesses();
    saveGame();
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
window.cleanupEmptyBusinesses = cleanupEmptyBusinesses;


// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–∏–∑–Ω–µ—Å–∞
function removeBusinessRow(businessId) {
  const row = document.getElementById(`business-row-${businessId}`);
  if (row) {
    row.remove();
    removeBusiness(businessId);
    log('–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–∏–∑–Ω–µ—Å–∞', { businessId });
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
window.removeBusinessRow = removeBusinessRow;

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤–ª–µ–≤–æ
function scrollTableLeft(containerId) {
  const container = document.getElementById(containerId);
  if (container) {
    const scrollStep = 150; // –®–∞–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    container.scrollBy({
      left: -scrollStep,
      behavior: 'smooth'
    });
    log(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${containerId} –≤–ª–µ–≤–æ –Ω–∞ ${scrollStep}px`);
  }
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤–ø—Ä–∞–≤–æ
function scrollTableRight(containerId) {
  const container = document.getElementById(containerId);
  if (container) {
    const scrollStep = 150; // –®–∞–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    container.scrollBy({
      left: scrollStep,
      behavior: 'smooth'
    });
    log(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${containerId} –≤–ø—Ä–∞–≤–æ –Ω–∞ ${scrollStep}px`);
  }
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É —Ç–∞–±–ª–∏—Ü—ã
function scrollTableToStart(containerId) {
  const container = document.getElementById(containerId);
  if (container) {
    container.scrollTo({
      left: 0,
      behavior: 'smooth'
    });
    log(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${containerId} –∫ –Ω–∞—á–∞–ª—É`);
  }
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É —Ç–∞–±–ª–∏—Ü—ã
function scrollTableToEnd(containerId) {
  const container = document.getElementById(containerId);
  if (container) {
    container.scrollTo({
      left: container.scrollWidth,
      behavior: 'smooth'
    });
    log(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${containerId} –∫ –∫–æ–Ω—Ü—É`);
  }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
window.scrollTableLeft = scrollTableLeft;
window.scrollTableRight = scrollTableRight;
window.scrollTableToStart = scrollTableToStart;
window.scrollTableToEnd = scrollTableToEnd;

