// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const GAME_CONFIG = {
  BANK_LOAN_RATE: 0.10,        // 10% –æ—Ç —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
  STAGE2_MULTIPLIER: 100,      // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ √ó 100
  STAGE2_BONUS: 50000,         // +50,000 –∫ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ
  STORAGE_KEY: 'rat_race_game' // –ö–ª—é—á –¥–ª—è LocalStorage
};

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
const DEBUG = true;

// –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
let gameState = {
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è
  profession: "",
  dream: "",
  auditor: "",
  
  // –î–æ—Ö–æ–¥—ã
  income: {
    salary: 0,
    realEstateBusiness: []
  },
  
  // –†–∞—Å—Ö–æ–¥—ã
  expenses: {
    taxes: 0,
    houseMortgage: 0,
    educationLoan: 0,
    carLoan: 0,
    creditCards: 0,
    otherExpenses: 0,
    bankLoan: 0,
    childrenExpenses: 0,
      childrenCount: 0,
    childrenCount: 0
  },
  
  // –ê–∫—Ç–∏–≤—ã
  assets: {
    savings: 0,
    preciousMetals: 0,
    stocks: [], // [{name, quantity, price}]
    realEstateBusiness: [] // [{name, downPayment, price}]
  },
  
  // –ü–∞—Å—Å–∏–≤—ã
  liabilities: {
    houseMortgage: 0,
    educationLoan: 0,
    carLoan: 0,
    creditCards: 0,
    bankLoan: 0,
    realEstateBusiness: [] // [{name, mortgage}]
  },
  
  // –ë–ª–∞–Ω–∫ —É—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
  cashFlow: {
    initialBalance: 0,
    transactions: [] // [{date, description, amount, type}]
  },
  
  // 2 —ç—Ç–∞–ø
  stage2: {
    passiveIncomeAtTransition: 0,
    targetAmount: 0,
    businesses: [] // [{name, monthlyCashFlow, income}]
  },
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  currentStage: 1,
  stage2Unlocked: false
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, data = null) {
  if (DEBUG) {
    console.log(`[Rat Race] ${message}`, data);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function handleError(error, context) {
  if (DEBUG) {
    console.error(`[Rat Race Error] ${context}:`, error);
  }
  alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${context}`);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ LocalStorage
function saveGame() {
  try {
    const gameData = JSON.stringify(gameState);
    localStorage.setItem(GAME_CONFIG.STORAGE_KEY, gameData);
    log('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', { size: gameData.length });
  } catch (error) {
    handleError(error, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –∏–∑ LocalStorage
function loadGame() {
  try {
    const savedData = localStorage.getItem(GAME_CONFIG.STORAGE_KEY);
    if (savedData) {
      const loadedState = JSON.parse(savedData);
      gameState = { ...gameState, ...loadedState };
      log('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', { currentStage: gameState.currentStage });
      return true;
    } else {
      log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      return false;
    }
  } catch (error) {
    handleError(error, '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã');
    return false;
  }
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
function resetGame() {
  try {
    gameState = {
      profession: "",
      dream: "",
      auditor: "",
      income: {
        salary: 0,
        realEstateBusiness: []
      },
      expenses: {
        taxes: 0,
        houseMortgage: 0,
        educationLoan: 0,
        carLoan: 0,
        creditCards: 0,
        otherExpenses: 0,
        bankLoan: 0,
        childrenExpenses: 0,
      childrenCount: 0,
    childrenCount: 0
      },
      assets: {
        savings: 0,
        preciousMetals: 0,
        stocks: [],
        realEstateBusiness: []
      },
      liabilities: {
        houseMortgage: 0,
        educationLoan: 0,
        carLoan: 0,
        creditCards: 0,
        bankLoan: 0,
        realEstateBusiness: []
      },
      cashFlow: {
        initialBalance: 0,
        transactions: []
      },
      stage2: {
        passiveIncomeAtTransition: 0,
        targetAmount: 0,
        businesses: []
      },
      currentStage: 1,
      stage2Unlocked: false
    };
    saveGame();
    log('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é');
  } catch (error) {
    handleError(error, '–°–±—Ä–æ—Å –∏–≥—Ä—ã');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–∞–Ω–∫–æ–º —É—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤

// –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
function calculateStartingCapital() {
  const savings = parseFloat(gameState.cashFlow.savings) || 0;
  const monthlyCashFlow = parseFloat(gameState.cashFlow.monthlyCashFlow) || 0;
  gameState.cashFlow.startingCapital = savings + monthlyCashFlow;
  log("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω", { savings, monthlyCashFlow, startingCapital: gameState.cashFlow.startingCapital });
  return gameState.cashFlow.startingCapital;
}

// –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
function calculateCurrentBalance() {
  const startingCapital = gameState.cashFlow.startingCapital || 0;
  let transactionSum = 0;
  
  gameState.cashFlow.transactions.forEach(transaction => {
    if (transaction.type === "income") {
      transactionSum += parseFloat(transaction.amount) || 0;
    } else if (transaction.type === "expense") {
      transactionSum -= parseFloat(transaction.amount) || 0;
    }
  });
  
  gameState.cashFlow.currentBalance = startingCapital + transactionSum;
  log("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω", { startingCapital, transactionSum, currentBalance: gameState.cashFlow.currentBalance });
  return gameState.cashFlow.currentBalance;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function addTransaction(amount, type, description) {
  const transaction = {
    id: Date.now().toString(),
    amount: parseFloat(amount) || 0,
    type: type, // "income" –∏–ª–∏ "expense"
    description: description || ""
  };
  
  gameState.cashFlow.transactions.push(transaction);
  calculateCurrentBalance();
  saveGame();
  log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞", transaction);
  return transaction;
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function removeTransaction(transactionId) {
  const index = gameState.cashFlow.transactions.findIndex(t => t.id === transactionId);
  if (index !== -1) {
    const removed = gameState.cashFlow.transactions.splice(index, 1)[0];
    calculateCurrentBalance();
    saveGame();
    log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', removed);
    return removed;
  }
  return null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function updateTransaction(transactionId, amount, type, description) {
  const transaction = gameState.cashFlow.transactions.find(t => t.id === transactionId);
  if (transaction) {
    transaction.amount = parseFloat(amount) || 0;
    transaction.type = type;
    transaction.description = description || "";
    calculateCurrentBalance();
    saveGame();
    log("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", transaction);
    return transaction;
  } else {
    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    return addTransaction(amount, type, description);
  }
}


// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 2 —ç—Ç–∞–ø–æ–º

// –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ (—Å—É–º–º–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤)
function calculateStage2CurrentIncome() {
  let totalIncome = 0;
  
  gameState.stage2.businesses.forEach(business => {
    totalIncome += parseFloat(business.monthlyCashFlow) || 0;
  });
  
  gameState.stage2.currentIncome = totalIncome;
  log("–¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (—Å—É–º–º–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤)", { totalIncome });
  return totalIncome;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
function addBusiness(name, monthlyCashFlow, income) {
  const business = {
    id: Date.now().toString(),
    name: name || "",
    monthlyCashFlow: parseFloat(monthlyCashFlow) || 0,
    income: parseFloat(income) || 0
  };
  
  gameState.stage2.businesses.push(business);
  calculateStage2CurrentIncome();
  saveGame();
  log("–ë–∏–∑–Ω–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω", business);
  return business;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
function removeBusiness(businessId) {
  const index = gameState.stage2.businesses.findIndex(b => b.id === businessId);
  if (index !== -1) {
    const removed = gameState.stage2.businesses.splice(index, 1)[0];
    calculateStage2CurrentIncome();
    saveGame();
    log('–ë–∏–∑–Ω–µ—Å —É–¥–∞–ª–µ–Ω', removed);
    return removed;
  }
  return null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
function updateBusiness(businessId, name, monthlyCashFlow, income) {
  const business = gameState.stage2.businesses.find(b => b.id === businessId);
  if (business) {
    business.name = name || "";
    business.monthlyCashFlow = parseFloat(monthlyCashFlow) || 0;
    business.income = parseFloat(income) || 0;
    calculateStage2CurrentIncome();
    saveGame();
    log("–ë–∏–∑–Ω–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω", business);
    return business;
  } else {
    // –ï—Å–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    return addBusiness(name, monthlyCashFlow, income);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
function checkWinCondition() {
  if (!gameState.stage2Unlocked) {
    return false;
  }
  
  const currentIncome = calculateStage2CurrentIncome();
  const targetAmount = gameState.stage2.targetAmount || 0;
  
  if (currentIncome >= targetAmount) {
    gameState.gameWon = true;
    showWinNotification();
    log("–ò–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞!", { currentIncome, targetAmount });
    return true;
  }
  
  return false;
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ
function showWinNotification() {
  const winStatus = document.getElementById("win-status");
  if (winStatus) {
    winStatus.style.display = "block";
    winStatus.classList.remove("alert-info");
    winStatus.classList.add("alert-success");
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É '–ö—Ä—ã—Å–∏–Ω—ã–µ –±–µ–≥–∞'!");
}



