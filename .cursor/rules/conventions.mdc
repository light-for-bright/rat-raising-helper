---
alwaysApply: true
---

# Соглашения по разработке

> Основано на техническом видении проекта из [vision.md](./vision.md)

## Основные принципы

- **KISS превыше всего** - простой, понятный код без излишних абстракций
- **MVP-подход** - только необходимый функционал для проверки идеи
- **Быстрые итерации** - работающий код важнее "красивого" кода

## Структура и организация

### Файловая структура
```
rat_raising_helper/
├── index.html              # Главная страница
├── css/style.css           # Все стили
├── js/
│   ├── app.js              # Основная логика
│   ├── game-data.js        # Модель данных
│   └── calculations.js     # Функции расчетов
└── README.md
```

### Принципы организации кода
- **Один файл = одна ответственность**
- **Плоская структура** - минимум вложенности
- **Прямолинейные связи** между компонентами

## Стиль кода

### JavaScript
```javascript
// Используй const/let, избегай var
const gameState = {};

// Простые функции с понятными именами
function calculateMonthlyCashFlow() {
  // логика
}

// Обработка ошибок
function handleError(error, context) {
  if (DEBUG) {
    console.error(`[Rat Race Error] ${context}:`, error);
  }
  alert(`Произошла ошибка: ${context}`);
}
```

### HTML
```html
<!-- Семантические теги -->
<main>
  <section id="income-section">
    <!-- контент -->
  </section>
</main>

<!-- Понятные ID и классы -->
<div id="monthly-cash-flow" class="calculated-field">
```

### CSS
```css
/* Простые селекторы */
.calculated-field {
  font-weight: bold;
  color: #28a745;
}

/* Избегай глубокой вложенности */
#income-section .table {
  /* стили */
}
```

## Модель данных

### Структура
- **Плоская структура** без глубокой вложенности
- **Простые типы**: числа, строки, массивы объектов
- **Единый объект состояния** в `gameState`

### Работа с данными
```javascript
// Сохранение
localStorage.setItem(GAME_CONFIG.STORAGE_KEY, JSON.stringify(gameState));

// Загрузка
const saved = localStorage.getItem(GAME_CONFIG.STORAGE_KEY);
if (saved) {
  gameState = JSON.parse(saved);
}
```

## Функциональность

### Автоматические расчеты
- **Все расчеты в `calculations.js`**
- **Пересчет при каждом изменении данных**
- **Проверка условий перехода между этапами**

### Обработка событий
```javascript
// Простые обработчики
document.getElementById('salary-input').addEventListener('input', function() {
  gameState.income.salary = parseFloat(this.value) || 0;
  recalculateAll();
  saveGame();
});
```

### Валидация
- **Минимальная валидация** - только критически важные проверки
- **Простые проверки**: `parseFloat(value) || 0`
- **Уведомления об ошибках** через `alert()`

## UI/UX

### Принципы
- **Bootstrap для быстрого UI**
- **Понятные подписи** на русском языке
- **Автоматическое добавление строк** в таблицах
- **Блокировка вкладок** до выполнения условий

### Интерактивность
```javascript
// Динамическое добавление строк
function addTableRow(tableId, data) {
  const table = document.getElementById(tableId);
  const row = table.insertRow();
  // заполнение строки
}

// Управление вкладками
function updateTabVisibility() {
  const stage2Tab = document.getElementById('stage2-tab');
  stage2Tab.style.display = gameState.stage2Unlocked ? 'block' : 'none';
}
```

## Конфигурация и логирование

### Константы
```javascript
// В начале файлов
const GAME_CONFIG = {
  BANK_LOAN_RATE: 0.10,
  STAGE2_MULTIPLIER: 100,
  STAGE2_BONUS: 50000,
  STORAGE_KEY: 'rat_race_game'
};
```

### Логирование
```javascript
// Только для разработки
const DEBUG = true;

function log(message, data = null) {
  if (DEBUG) {
    console.log(`[Rat Race] ${message}`, data);
  }
}
```

## Запрещено

- ❌ Фреймворки и библиотеки (кроме Bootstrap)
- ❌ Сложные паттерны проектирования
- ❌ Глубокая вложенность объектов
- ❌ Излишняя абстракция
- ❌ Внешние зависимости
- ❌ Сложная валидация
- ❌ Множественные конфигурационные файлы

## Обязательно

- ✅ Простой, читаемый код
- ✅ Понятные имена переменных и функций
- ✅ Автоматические расчеты
- ✅ Сохранение в LocalStorage
- ✅ Обработка ошибок
- ✅ Русскоязычный интерфейс
- ✅ Работающий прототип

---

**Помни**: Цель - быстро создать работающий прототип для проверки идеи, а не идеальный код.
# Соглашения по разработке

> Основано на техническом видении проекта из [vision.md](./vision.md)

## Основные принципы

- **KISS превыше всего** - простой, понятный код без излишних абстракций
- **MVP-подход** - только необходимый функционал для проверки идеи
- **Быстрые итерации** - работающий код важнее "красивого" кода

## Структура и организация

### Файловая структура
```
rat_raising_helper/
├── index.html              # Главная страница
├── css/style.css           # Все стили
├── js/
│   ├── app.js              # Основная логика
│   ├── game-data.js        # Модель данных
│   └── calculations.js     # Функции расчетов
└── README.md
```

### Принципы организации кода
- **Один файл = одна ответственность**
- **Плоская структура** - минимум вложенности
- **Прямолинейные связи** между компонентами

## Стиль кода

### JavaScript
```javascript
// Используй const/let, избегай var
const gameState = {};

// Простые функции с понятными именами
function calculateMonthlyCashFlow() {
  // логика
}

// Обработка ошибок
function handleError(error, context) {
  if (DEBUG) {
    console.error(`[Rat Race Error] ${context}:`, error);
  }
  alert(`Произошла ошибка: ${context}`);
}
```

### HTML
```html
<!-- Семантические теги -->
<main>
  <section id="income-section">
    <!-- контент -->
  </section>
</main>

<!-- Понятные ID и классы -->
<div id="monthly-cash-flow" class="calculated-field">
```

### CSS
```css
/* Простые селекторы */
.calculated-field {
  font-weight: bold;
  color: #28a745;
}

/* Избегай глубокой вложенности */
#income-section .table {
  /* стили */
}
```

## Модель данных

### Структура
- **Плоская структура** без глубокой вложенности
- **Простые типы**: числа, строки, массивы объектов
- **Единый объект состояния** в `gameState`

### Работа с данными
```javascript
// Сохранение
localStorage.setItem(GAME_CONFIG.STORAGE_KEY, JSON.stringify(gameState));

// Загрузка
const saved = localStorage.getItem(GAME_CONFIG.STORAGE_KEY);
if (saved) {
  gameState = JSON.parse(saved);
}
```

## Функциональность

### Автоматические расчеты
- **Все расчеты в `calculations.js`**
- **Пересчет при каждом изменении данных**
- **Проверка условий перехода между этапами**

### Обработка событий
```javascript
// Простые обработчики
document.getElementById('salary-input').addEventListener('input', function() {
  gameState.income.salary = parseFloat(this.value) || 0;
  recalculateAll();
  saveGame();
});
```

### Валидация
- **Минимальная валидация** - только критически важные проверки
- **Простые проверки**: `parseFloat(value) || 0`
- **Уведомления об ошибках** через `alert()`

## UI/UX

### Принципы
- **Bootstrap для быстрого UI**
- **Понятные подписи** на русском языке
- **Автоматическое добавление строк** в таблицах
- **Блокировка вкладок** до выполнения условий

### Интерактивность
```javascript
// Динамическое добавление строк
function addTableRow(tableId, data) {
  const table = document.getElementById(tableId);
  const row = table.insertRow();
  // заполнение строки
}

// Управление вкладками
function updateTabVisibility() {
  const stage2Tab = document.getElementById('stage2-tab');
  stage2Tab.style.display = gameState.stage2Unlocked ? 'block' : 'none';
}
```

## Конфигурация и логирование

### Константы
```javascript
// В начале файлов
const GAME_CONFIG = {
  BANK_LOAN_RATE: 0.10,
  STAGE2_MULTIPLIER: 100,
  STAGE2_BONUS: 50000,
  STORAGE_KEY: 'rat_race_game'
};
```

### Логирование
```javascript
// Только для разработки
const DEBUG = true;

function log(message, data = null) {
  if (DEBUG) {
    console.log(`[Rat Race] ${message}`, data);
  }
}
```

## Запрещено

- ❌ Фреймворки и библиотеки (кроме Bootstrap)
- ❌ Сложные паттерны проектирования
- ❌ Глубокая вложенность объектов
- ❌ Излишняя абстракция
- ❌ Внешние зависимости
- ❌ Сложная валидация
- ❌ Множественные конфигурационные файлы

## Обязательно

- ✅ Простой, читаемый код
- ✅ Понятные имена переменных и функций
- ✅ Автоматические расчеты
- ✅ Сохранение в LocalStorage
- ✅ Обработка ошибок
- ✅ Русскоязычный интерфейс
- ✅ Работающий прототип

---

**Помни**: Цель - быстро создать работающий прототип для проверки идеи, а не идеальный код.
